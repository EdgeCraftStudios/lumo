name: release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      message:
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.check-version.outputs.valid }}

    steps:
      - name: Validate version format
        id: check-version
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+.*$ ]]; then
            echo "valid=true" >> "$GITHUB_OUTPUT"
          else
            echo "valid=false" >> "$GITHUB_OUTPUT"
            echo "Invalid version format: ${{ github.event.inputs.version }}"
            exit 1
          fi

  build-wheel:
    needs: validate
    runs-on: ubuntu-latest
    if: needs.validate.outputs.valid == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Tag the version
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          git tag -a "${{ github.event.inputs.version }}" -m "${{ github.event.inputs.message }}"
          git push origin "${{ github.event.inputs.version }}"

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Build wheel
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install build==1.3.0
          python -m build

      - name: Upload wheel
        uses: actions/upload-artifact@v5
        with:
          name: lumo
          path: dist/*.whl
          retention-days: 2

  release:
    needs: build-wheel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download wheel
        uses: actions/download-artifact@v5
        with:
          name: lumo
          path: lumo

      - name: Create GitHub release draft
        run: gh release create "${{ github.event.inputs.version }}" lumo/*.whl --title "$(echo "${{ github.repository }}" | cut -d/ -f2) - ${{ github.event.inputs.version }}" --draft